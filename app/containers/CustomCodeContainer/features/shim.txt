/* eslint-disable */

/* Polyfill service v3.18.1
 * For detailed credits and licence information see https://github.com/financial-times/polyfill-service.
 *
 * Features requested: default
 *
 * - Object.defineProperty, License: CC0 (required by "default", "Array.from", "Array.isArray", "Array.of", "Array.prototype.fill", "Element.prototype.classList", "Event", "CustomEvent", "Event.focusin", "Event.hashchange", "Function.prototype.bind", "Map", "Object.defineProperties", "Object.create", "Set", "Symbol", "Symbol.iterator", "Symbol.species")
 * - Array.from, License: CC0 (required by "default")
 * - Array.isArray, License: CC0 (required by "default", "Promise")
 * - Array.of, License: MIT (required by "default")
 * - Array.prototype.every, License: CC0 (required by "default")
 * - Array.prototype.fill, License: CC0 (required by "default")
 * - Array.prototype.filter, License: CC0 (required by "default", "Symbol", "Map", "Set")
 * - Array.prototype.forEach, License: CC0 (required by "default", "URL", "Symbol", "Map", "Set")
 * - Array.prototype.indexOf, License: CC0 (required by "default", "Map", "Set")
 * - Array.prototype.lastIndexOf, License: CC0 (required by "default")
 * - Array.prototype.map, License: CC0 (required by "default", "Symbol", "Map", "Set")
 * - Array.prototype.reduce, License: CC0 (required by "default")
 * - Array.prototype.reduceRight, License: CC0 (required by "default")
 * - Array.prototype.some, License: CC0 (required by "default")
 * - Window, License: CC0 (required by "default", "Event", "CustomEvent", "Event.focusin", "Event.hashchange")
 * - Document, License: CC0 (required by "default", "Element.prototype.after", "Element.prototype.append", "Element.prototype.before", "Element.prototype.prepend", "Element.prototype.remove", "Element.prototype.replaceWith", "Element", "Element.prototype.classList", "Element.prototype.cloneNode", "Element.prototype.matches", "Element.prototype.closest", "Event", "CustomEvent", "Event.focusin", "Event.hashchange", "document.querySelector", "~html5-elements", "_mutation")
 * - Element, License: CC0 (required by "default", "Element.prototype.after", "Element.prototype.append", "Element.prototype.before", "Element.prototype.classList", "Element.prototype.cloneNode", "Element.prototype.matches", "Element.prototype.closest", "Element.prototype.prepend", "Element.prototype.remove", "Element.prototype.replaceWith", "Event", "CustomEvent", "Event.focusin", "Event.hashchange", "Node.prototype.contains", "document.querySelector", "_mutation")
 * - Event, License: CC0 (required by "default", "CustomEvent", "Event.focusin", "Event.hashchange", "Promise", "XMLHttpRequest")
 * - CustomEvent, License: CC0 (required by "default", "document.visibilityState")
 * - _DOMTokenList, License: CC0 (required by "DOMTokenList", "default", "Element.prototype.classList")
 * - DOMTokenList, License: CC0 (required by "default")
 * - Date.now, License: CC0 (required by "default", "requestAnimationFrame", "performance.now")
 * - Date.prototype.toISOString, License: CC0 (required by "default")
 * - _mutation, License: CC0 (required by "Element.prototype.after", "default", "Element.prototype.append", "Element.prototype.before", "Element.prototype.prepend", "Element.prototype.remove", "Element.prototype.replaceWith")
 * - Element.prototype.after, License: CC0 (required by "default")
 * - Element.prototype.append, License: CC0 (required by "default")
 * - Element.prototype.before, License: CC0 (required by "default")
 * - Element.prototype.classList, License: CC0 (required by "default")
 * - Element.prototype.cloneNode, License: CC0 (required by "default")
 * - document.querySelector, License: CC0 (required by "default", "Element.prototype.matches", "Element.prototype.closest")
 * - Element.prototype.matches, License: CC0 (required by "default", "Element.prototype.closest")
 * - Element.prototype.closest, License: CC0 (required by "default")
 * - Element.prototype.prepend, License: CC0 (required by "default")
 * - Element.prototype.remove, License: CC0 (required by "default")
 * - Element.prototype.replaceWith, License: CC0 (required by "default")
 * - Event.focusin, License: CC0 (required by "default")
 * - Event.hashchange, License: CC0 (required by "default")
 * - Function.prototype.bind, License: MIT (required by "default", "Object.getOwnPropertyDescriptor")
 * - JSON, License: MIT (required by "default")
 * - Object.defineProperties, License: CC0 (required by "default", "Object.create", "URL", "location.origin")
 * - Object.create, License: CC0 (required by "default", "Symbol", "Map", "Set")
 * - Object.getOwnPropertyNames, License: CC0 (required by "default", "Symbol", "Map", "Set")
 * - Object.getOwnPropertyDescriptor, License: CC0 (required by "default", "Symbol", "Map", "Set")
 * - Object.keys, License: CC0 (required by "default", "Symbol", "Map", "Set")
 * - Symbol, License: MIT (required by "Map", "default", "Set", "Symbol.iterator", "Symbol.species")
 * - Symbol.iterator, License: MIT (required by "Map", "default", "Set")
 * - Symbol.species, License: MIT (required by "Map", "default", "Set")
 * - Number.isNaN, License: MIT (required by "default", "Map", "Set")
 * - Map, License: CC0 (required by "default")
 * - Node.prototype.contains, License: CC0 (required by "default")
 * - Object.assign, License: CC0 (required by "default")
 * - Object.getPrototypeOf, License: CC0 (required by "default")
 * - setImmediate, License: CC0 (required by "Promise", "default")
 * - Promise, License: MIT (required by "default")
 * - Set, License: CC0 (required by "default")
 * - String.prototype.endsWith, License: CC0 (required by "default")
 * - String.prototype.includes, License: CC0 (required by "default")
 * - String.prototype.startsWith, License: CC0 (required by "default")
 * - String.prototype.trim, License: CC0 (required by "default")
 * - URL, License: CC0 (required by "default")
 * - XMLHttpRequest, License: CC0 (required by "default")
 * - atob, License: MIT (required by "default")
 * - document.visibilityState, License: CC0 (required by "default")
 * - location.origin, License: CC0 (required by "default")
 * - performance.now, License: CC0 (required by "requestAnimationFrame", "default")
 * - requestAnimationFrame, License: MIT (required by "default")
 * - ~html5-elements, License: MIT (required by "default") */


 // Array.from
// // Wrapped in IIFE to prevent leaking to global scope.
// (function () {
// 	function parseIterable (arraylike) {
// 		var done = false;
// 		var iterableResponse;
// 		var tempArray = [];
//
// 		// if the iterable doesn't have next;
// 		// it is an iterable if 'next' is a function but it has not been defined on
// 		// the object itself.
// 		if (typeof arraylike.next === 'function') {
// 			while (!done) {
// 				iterableResponse = arraylike.next();
// 				if (
// 					iterableResponse.hasOwnProperty('value') &&
// 					iterableResponse.hasOwnProperty('done')
// 				) {
// 					if (iterableResponse.done === true) {
// 						done = true;
// 						break;
//
// 					// handle the case where the done value is not Boolean
// 					} else if (iterableResponse.done !== false) {
// 						break;
// 					}
//
// 					tempArray.push(iterableResponse.value);
// 				} else {
//
// 					// it does not conform to the iterable pattern
// 					break;
// 				}
// 			}
// 		}
//
// 		if (done) {
// 			return tempArray;
// 		} else {
//
// 			// something went wrong return false;
// 			return false;
// 		}
//
// 	}
//
// 	Object.defineProperty(Array, 'from', {
// 		configurable: true,
// 		value: function from(source) {
// 			// handle non-objects
// 			if (source === undefined || source === null) {
// 				throw new TypeError(source + ' is not an object');
// 			}
//
// 			// handle maps that are not functions
// 			if (1 in arguments && !(arguments[1] instanceof Function)) {
// 				throw new TypeError(arguments[1] + ' is not a function');
// 			}
//
// 			var arraylike = typeof source === 'string' ? source.split('') : Object(source);
// 			var map = arguments[1];
// 			var scope = arguments[2];
// 			var array = [];
// 			var index = -1;
// 			var length = Math.min(Math.max(Number(arraylike.length) || 0, 0), 9007199254740991);
// 			var value;
//
// 			// variables for rebuilding array from iterator
// 			var arrayFromIterable;
//
// 			// if it is an iterable treat like one
// 			arrayFromIterable = parseIterable(arraylike);
//
// 			//if it is a Map or a Set then handle them appropriately
// 			if (
// 				typeof arraylike.entries === 'function' &&
// 				typeof arraylike.values === 'function'
// 			) {
// 				if (arraylike.constructor.name === 'Set' && 'values' in Set.prototype) {
// 					arrayFromIterable = parseIterable(arraylike.values());
// 				}
// 				if (arraylike.constructor.name === 'Map' && 'entries' in Map.prototype) {
// 					arrayFromIterable = parseIterable(arraylike.entries());
// 				}
// 			}
//
// 			if (arrayFromIterable) {
// 				arraylike = arrayFromIterable;
// 				length = arrayFromIterable.length;
// 			}
//
// 			while (++index < length) {
// 					value = arraylike[index];
//
// 					array[index] = map ? map.call(scope, value, index) : value;
// 			}
//
// 			array.length = length;
//
// 			return array;
// 		},
// 		writable: true
// 	});
// }());

// Array.of
/*! https://mths.be/array-of v0.1.0 by @mathias */
(function () {
	'use strict';
	var defineProperty = (function () {
		// IE 8 only supports `Object.defineProperty` on DOM elements
		try {
			var object = {};
			var $defineProperty = Object.defineProperty;
			var result = $defineProperty(object, object, object) && $defineProperty;
		} catch (error) { /**/ }
		return result;
	}());
	var isConstructor = function isConstructor(Constructor) {
		try {
			return !!new Constructor();
		} catch (_) {
			return false;
		}
	};
	var of = function of() {
		var items = arguments;
		var length = items.length;
		var Me = this;
		var result = isConstructor(Me) ? new Me(length) : new Array(length);
		var index = 0;
		var value;
		while (index < length) {
			value = items[index];
			if (defineProperty) {
				defineProperty(result, index, {
					'value': value,
					'writable': true,
					'enumerable': true,
					'configurable': true
				});
			} else {
				result[index] = value;
			}
			index += 1;
		}
		result.length = length;
		return result;
	};
	if (defineProperty) {
		defineProperty(Array, 'of', {
			'value': of,
			'configurable': true,
			'writable': true
		});
	} else {
		Array.of = of;
	}
}());

// Array.prototype.fill
Object.defineProperty(Array.prototype, 'fill', {
	configurable: true,
	value: function fill(value) {
		if (this === undefined || this === null) {
			throw new TypeError(this + ' is not an object');
		}

		var arrayLike = Object(this);

		var length = Math.max(Math.min(arrayLike.length, 9007199254740991), 0) || 0;

		var relativeStart = 1 in arguments ? parseInt(Number(arguments[1]), 10) || 0 : 0;

		relativeStart = relativeStart < 0 ? Math.max(length + relativeStart, 0) : Math.min(relativeStart, length);

		var relativeEnd = 2 in arguments && arguments[2] !== undefined ? parseInt(Number(arguments[2]), 10) || 0 : length;

		relativeEnd = relativeEnd < 0 ? Math.max(length + arguments[2], 0) : Math.min(relativeEnd, length);

		while (relativeStart < relativeEnd) {
			arrayLike[relativeStart] = value;

			++relativeStart;
		}

		return arrayLike;
	},
	writable: true
});

// https://tc39.github.io/ecma262/#sec-array.prototype.find
if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    value: function(predicate) {
     // 1. Let O be ? ToObject(this value).
      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      var o = Object(this);

      // 2. Let len be ? ToLength(? Get(O, "length")).
      var len = o.length >>> 0;

      // 3. If IsCallable(predicate) is false, throw a TypeError exception.
      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      }

      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
      var thisArg = arguments[1];

      // 5. Let k be 0.
      var k = 0;

      // 6. Repeat, while k < len
      while (k < len) {
        // a. Let Pk be ! ToString(k).
        // b. Let kValue be ? Get(O, Pk).
        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
        // d. If testResult is true, return kValue.
        var kValue = o[k];
        if (predicate.call(thisArg, kValue, k, o)) {
          return kValue;
        }
        // e. Increase k by 1.
        k++;
      }

      // 7. Return undefined.
      return undefined;
    }
  });
}

// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
if (!Array.prototype.findIndex) {
  Object.defineProperty(Array.prototype, 'findIndex', {
    value: function(predicate) {
     // 1. Let O be ? ToObject(this value).
      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      var o = Object(this);

      // 2. Let len be ? ToLength(? Get(O, "length")).
      var len = o.length >>> 0;

      // 3. If IsCallable(predicate) is false, throw a TypeError exception.
      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      }

      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
      var thisArg = arguments[1];

      // 5. Let k be 0.
      var k = 0;

      // 6. Repeat, while k < len
      while (k < len) {
        // a. Let Pk be ! ToString(k).
        // b. Let kValue be ? Get(O, Pk).
        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
        // d. If testResult is true, return k.
        var kValue = o[k];
        if (predicate.call(thisArg, kValue, k, o)) {
          return k;
        }
        // e. Increase k by 1.
        k++;
      }

      // 7. Return -1.
      return -1;
    }
  });
}

// Object.defineProperties
Object.defineProperties = function defineProperties(object, descriptors) {
	for (var property in descriptors) {
		Object.defineProperty(object, property, descriptors[property]);
	}

	return object;
};

// Object.create DOESNT WORK
// (function(){
// 	function isPrimitive(o) {
// 		return o == null || (typeof o !== 'object' && typeof o !== 'function');
//   };
//
// 	Object.create = function create(prototype, properties) {
// 	/* jshint evil: true */
//     if (prototype !== null && isPrimitive(prototype)) {
//       throw new TypeError('Object prototype may only be an Object or null');
//     }
//
// 	var
// 	object = new Function('e', 'function Object() {}Object.prototype=e;return new Object')(prototype);
//
// 	object.constructor.prototype = prototype;
//
// 	if (1 in arguments) {
// 		Object.defineProperties(object, properties);
// 	}
//
// 	return object;
// };
// }());

// Number.isNaN
Number.isNaN = Number.isNaN || function(value) {
    return typeof value === "number" && isNaN(value);
};

// // Map
// (function(global) {
//
//
// 	// Deleted map items mess with iterator pointers, so rather than removing them mark them as deleted. Can't use undefined or null since those both valid keys so use a private symbol.
// 	var undefMarker = Symbol('undef');
//
// 	// NaN cannot be found in an array using indexOf, so we encode NaNs using a private symbol.
// 	var NaNMarker = Symbol('NaN');
//
// 	function encodeKey(key) {
// 		return Number.isNaN(key) ? NaNMarker : key;
// 	}
// 	function decodeKey(encodedKey) {
// 		return (encodedKey === NaNMarker) ? NaN : encodedKey;
// 	}
//
// 	function makeIterator(mapInst, getter) {
// 		var nextIdx = 0;
// 		var done = false;
// 		return {
// 			next: function() {
// 				if (nextIdx === mapInst._keys.length) done = true;
// 				if (!done) {
// 					while (mapInst._keys[nextIdx] === undefMarker) nextIdx++;
// 					return {value: getter.call(mapInst, nextIdx++), done: false};
// 				} else {
// 					return {value: void 0, done:true};
// 				}
// 			}
// 		};
// 	}
//
// 	function calcSize(mapInst) {
// 		var size = 0;
// 		for (var i=0, s=mapInst._keys.length; i<s; i++) {
// 			if (mapInst._keys[i] !== undefMarker) size++;
// 		}
// 		return size;
// 	}
//
// 	var ACCESSOR_SUPPORT = true;
//
// 	function hasProtoMethod(instance, method){
// 		return typeof instance[method] === 'function';
// 	}
//
// 	var Map = function(data) {
// 		this._keys = [];
// 		this._values = [];
// 		// If `data` is iterable (indicated by presence of a forEach method), pre-populate the map
// 		if (data && hasProtoMethod(data, 'forEach')){
// 			// Fastpath: If `data` is a Map, shortcircuit all following the checks
// 			if (data instanceof Map ||
// 				// If `data` is not an instance of Map, it could be because you have a Map from an iframe or a worker or something.
// 				// Check if  `data` has all the `Map` methods and if so, assume data is another Map
// 				hasProtoMethod(data, 'clear') &&
// 				hasProtoMethod(data, 'delete') &&
// 				hasProtoMethod(data, 'entries') &&
// 				hasProtoMethod(data, 'forEach') &&
// 				hasProtoMethod(data, 'get') &&
// 				hasProtoMethod(data, 'has') &&
// 				hasProtoMethod(data, 'keys') &&
// 				hasProtoMethod(data, 'set') &&
// 				hasProtoMethod(data, 'values')){
// 				data.forEach(function (value, key) {
// 					this.set.apply(this, [key, value]);
// 				}, this);
// 			} else {
// 				data.forEach(function (item) {
// 					this.set.apply(this, item);
// 				}, this);
// 			}
// 		}
//
// 		if (!ACCESSOR_SUPPORT) this.size = calcSize(this);
// 	};
// 	Map.prototype = {};
//
// 	// Some old engines do not support ES5 getters/setters.  Since Map only requires these for the size property, we can fall back to setting the size property statically each time the size of the map changes.
// 	try {
// 		Object.defineProperty(Map.prototype, 'size', {
// 			get: function() {
// 				return calcSize(this);
// 			}
// 		});
// 	} catch(e) {
// 		ACCESSOR_SUPPORT = false;
// 	}
//
// 	Map.prototype['get'] = function(key) {
// 		var idx = this._keys.indexOf(encodeKey(key));
// 		return (idx !== -1) ? this._values[idx] : undefined;
// 	};
// 	Map.prototype['set'] = function(key, value) {
// 		var idx = this._keys.indexOf(encodeKey(key));
// 		if (idx !== -1) {
// 			this._values[idx] = value;
// 		} else {
// 			this._keys.push(encodeKey(key));
// 			this._values.push(value);
// 			if (!ACCESSOR_SUPPORT) this.size = calcSize(this);
// 		}
// 		return this;
// 	};
// 	Map.prototype['has'] = function(key) {
// 		return (this._keys.indexOf(encodeKey(key)) !== -1);
// 	};
// 	Map.prototype['delete'] = function(key) {
// 		var idx = this._keys.indexOf(encodeKey(key));
// 		if (idx === -1) return false;
// 		this._keys[idx] = undefMarker;
// 		this._values[idx] = undefMarker;
// 		if (!ACCESSOR_SUPPORT) this.size = calcSize(this);
// 		return true;
// 	};
// 	Map.prototype['clear'] = function() {
// 		this._keys = this._values = [];
// 		if (!ACCESSOR_SUPPORT) this.size = 0;
// 	};
// 	Map.prototype['values'] = function() {
// 		return makeIterator(this, function(i) { return this._values[i]; });
// 	};
// 	Map.prototype['keys'] = function() {
// 		return makeIterator(this, function(i) { return decodeKey(this._keys[i]); });
// 	};
// 	Map.prototype['entries'] =
// 	Map.prototype[Symbol.iterator] = function() {
// 		return makeIterator(this, function(i) { return [decodeKey(this._keys[i]), this._values[i]]; });
// 	};
// 	Map.prototype['forEach'] = function(callbackFn, thisArg) {
// 		thisArg = thisArg || global;
// 		var iterator = this.entries();
// 		var result = iterator.next();
// 		while (result.done === false) {
// 			callbackFn.call(thisArg, result.value[1], result.value[0], this);
// 			result = iterator.next();
// 		}
// 	};
// 	Map.prototype['constructor'] =
// 	Map.prototype[Symbol.species] = Map;
//
// 	Map.length = 0;
//
// 	// Export the object
// 	global.Map = Map;
//
// }(this));
//
// Object.assign
Object.assign = function assign(target, source) { // eslint-disable-line no-unused-vars
	for (var index = 1, key, src; index < arguments.length; ++index) {
		src = arguments[index];

		for (key in src) {
			if (Object.prototype.hasOwnProperty.call(src, key)) {
				target[key] = src[key];
			}
		}
	}

	return target;
};

// // Set
// (function(global) {
//
//
// 	// Deleted map items mess with iterator pointers, so rather than removing them mark them as deleted. Can't use undefined or null since those both valid keys so use a private symbol.
// 	var undefMarker = Symbol('undef');
//
// 	// NaN cannot be found in an array using indexOf, so we encode NaNs using a private symbol.
// 	var NaNMarker = Symbol('NaN');
//
// 	function encodeVal(data) {
// 		return Number.isNaN(data) ? NaNMarker : data;
// 	}
// 	function decodeVal(encodedData) {
// 		return (encodedData === NaNMarker) ? NaN : encodedData;
// 	}
//
// 	function makeIterator(setInst, getter) {
// 		var nextIdx = 0;
// 		return {
// 			next: function() {
// 				while (setInst._values[nextIdx] === undefMarker) nextIdx++;
// 				if (nextIdx === setInst._values.length) {
// 					return {value: void 0, done: true};
// 				}
// 				else {
// 					return {value: getter.call(setInst, nextIdx++), done: false};
// 				}
// 			}
// 		};
// 	}
//
// 	function calcSize(setInst) {
// 		var size = 0;
// 		for (var i=0, s=setInst._values.length; i<s; i++) {
// 			if (setInst._values[i] !== undefMarker) size++;
// 		}
// 		return size;
// 	}
//
// 	var ACCESSOR_SUPPORT = true;
//
// 	var Set = function(data) {
// 		this._values = [];
//
// 		// If `data` is iterable (indicated by presence of a forEach method), pre-populate the set
// 		data && (typeof data.forEach === 'function') && data.forEach(function (item) {
// 			this.add.call(this, item);
// 		}, this);
//
// 		if (!ACCESSOR_SUPPORT) this.size = calcSize(this);
// 	};
//
// 	// Some old engines do not support ES5 getters/setters.  Since Set only requires these for the size property, we can fall back to setting the size property statically each time the size of the set changes.
// 	try {
// 		Object.defineProperty(Set.prototype, 'size', {
// 			get: function() {
// 				return calcSize(this);
// 			}
// 		});
// 	} catch(e) {
// 		ACCESSOR_SUPPORT = false;
// 	}
//
// 	Set.prototype['add'] = function(value) {
// 		value = encodeVal(value);
// 		if (this._values.indexOf(value) === -1) {
// 			this._values.push(value);
// 			if (!ACCESSOR_SUPPORT) this.size = calcSize(this);
// 		}
// 		return this;
// 	};
// 	Set.prototype['has'] = function(value) {
// 		return (this._values.indexOf(encodeVal(value)) !== -1);
// 	};
// 	Set.prototype['delete'] = function(value) {
// 		var idx = this._values.indexOf(encodeVal(value));
// 		if (idx === -1) return false;
// 		this._values[idx] = undefMarker;
// 		if (!ACCESSOR_SUPPORT) this.size = calcSize(this);
// 		return true;
// 	};
// 	Set.prototype['clear'] = function() {
// 		this._values = [];
// 		if (!ACCESSOR_SUPPORT) this.size = 0;
// 	};
// 	Set.prototype['values'] =
// 	Set.prototype['keys'] = function() {
// 		return makeIterator(this, function(i) { return decodeVal(this._values[i]); });
// 	};
// 	Set.prototype['entries'] =
// 	Set.prototype[Symbol.iterator] = function() {
// 		return makeIterator(this, function(i) { return [decodeVal(this._values[i]), decodeVal(this._values[i])]; });
// 	};
// 	Set.prototype['forEach'] = function(callbackFn, thisArg) {
// 		thisArg = thisArg || global;
// 		var iterator = this.entries();
// 		var result = iterator.next();
// 		while (result.done === false) {
// 			callbackFn.call(thisArg, result.value[1], result.value[0], this);
// 			result = iterator.next();
// 		}
// 	};
// 	Set.prototype['constructor'] =
// 	Set.prototype[Symbol.species] = Set;
//
// 	Set.length = 0;
//
// 	// Export the object
// 	global.Set = Set;
//
// }(this));
//
// String.prototype.endsWith
String.prototype.endsWith = function (string) {
	var index = arguments.length < 2 ? this.length : arguments[1];
	var foundIndex = this.lastIndexOf(string);
	return foundIndex !== -1 && foundIndex === index - string.length;
};

// String.prototype.includes
String.prototype.includes = function (string, index) {
	if (typeof string === 'object' && string instanceof RegExp) throw new TypeError("First argument to String.prototype.includes must not be a regular expression");
	return this.indexOf(string, index) !== -1;
};

// String.prototype.startsWith
String.prototype.startsWith = function (string) {
	var index = arguments.length < 2 ? 0 : arguments[1];

	return this.slice(index).indexOf(string) === 0;
};


/*! buckets - version: 1.98.2 - (c) 2013 - 2016 Mauricio Santos - https://github.com/mauriciosantos/Buckets-JS*/
!function(a,b){"function"==typeof define&&define.amd?define([],b):"object"==typeof exports?module.exports=b():a.buckets=b()}(this,function(){"use strict";var a={};return a.defaultCompare=function(a,b){return a<b?-1:a===b?0:1},a.defaultEquals=function(a,b){return a===b},a.defaultToString=function(b){return null===b?"BUCKETS_NULL":a.isUndefined(b)?"BUCKETS_UNDEFINED":a.isString(b)?b:b.toString()},a.isFunction=function(a){return"function"==typeof a},a.isUndefined=function(a){return void 0===a},a.isString=function(a){return"[object String]"===Object.prototype.toString.call(a)},a.reverseCompareFunction=function(b){return a.isFunction(b)?function(a,c){return b(a,c)*-1}:function(a,b){return a<b?1:a===b?0:-1}},a.compareToEquals=function(a){return function(b,c){return 0===a(b,c)}},a.arrays={},a.arrays.indexOf=function(b,c,d){var e,f=d||a.defaultEquals,g=b.length;for(e=0;e<g;e+=1)if(f(b[e],c))return e;return-1},a.arrays.lastIndexOf=function(b,c,d){var e,f=d||a.defaultEquals,g=b.length;for(e=g-1;e>=0;e-=1)if(f(b[e],c))return e;return-1},a.arrays.contains=function(b,c,d){return a.arrays.indexOf(b,c,d)>=0},a.arrays.remove=function(b,c,d){var e=a.arrays.indexOf(b,c,d);return!(e<0)&&(b.splice(e,1),!0)},a.arrays.frequency=function(b,c,d){var e,f=d||a.defaultEquals,g=b.length,h=0;for(e=0;e<g;e+=1)f(b[e],c)&&(h+=1);return h},a.arrays.equals=function(b,c,d){var e,f=d||a.defaultEquals,g=b.length;if(b.length!==c.length)return!1;for(e=0;e<g;e+=1)if(!f(b[e],c[e]))return!1;return!0},a.arrays.copy=function(a){return a.concat()},a.arrays.swap=function(a,b,c){var d;return!(b<0||b>=a.length||c<0||c>=a.length)&&(d=a[b],a[b]=a[c],a[c]=d,!0)},a.arrays.forEach=function(a,b){var c,d=a.length;for(c=0;c<d;c+=1)if(b(a[c])===!1)return},a.Bag=function(b){var c={},d=b||a.defaultToString,e=new a.Dictionary(d),f=0;return c.add=function(b,d){var g;return(isNaN(d)||a.isUndefined(d))&&(d=1),!(a.isUndefined(b)||d<=0)&&(c.contains(b)?e.get(b).copies+=d:(g={value:b,copies:d},e.set(b,g)),f+=d,!0)},c.count=function(a){return c.contains(a)?e.get(a).copies:0},c.contains=function(a){return e.containsKey(a)},c.remove=function(b,d){var g;return(isNaN(d)||a.isUndefined(d))&&(d=1),!(a.isUndefined(b)||d<=0)&&(!!c.contains(b)&&(g=e.get(b),f-=d>g.copies?g.copies:d,g.copies-=d,g.copies<=0&&e.remove(b),!0))},c.toArray=function(){var a,b,c,d,f,g=[],h=e.values(),i=h.length;for(d=0;d<i;d+=1)for(a=h[d],b=a.value,c=a.copies,f=0;f<c;f+=1)g.push(b);return g},c.toSet=function(){var b,c=new a.Set(d),f=e.values(),g=f.length;for(b=0;b<g;b+=1)c.add(f[b].value);return c},c.forEach=function(a){e.forEach(function(b,c){var d,e=c.value,f=c.copies;for(d=0;d<f;d+=1)if(a(e)===!1)return!1;return!0})},c.size=function(){return f},c.isEmpty=function(){return 0===f},c.clear=function(){f=0,e.clear()},c.equals=function(b){var d;return!a.isUndefined(b)&&"function"==typeof b.toSet&&(c.size()===b.size()&&(d=!0,b.forEach(function(a){return d=c.count(a)===b.count(a)}),d))},c},a.BSTree=function(b){function c(a,b){for(var c,d=a;void 0!==d&&0!==c;)c=g(b,d.element),c<0?d=d.leftCh:c>0&&(d=d.rightCh);return d}function d(a){for(var b=a;void 0!==b.leftCh;)b=b.leftCh;return b}var e,f={},g=b||a.defaultCompare,h=0;return f.add=function(b){function c(a){for(var b,c,d=e;void 0!==d;){if(c=g(a.element,d.element),0===c)return;c<0?(b=d,d=d.leftCh):(b=d,d=d.rightCh)}return a.parent=b,void 0===b?e=a:g(a.element,b.element)<0?b.leftCh=a:b.rightCh=a,a}if(a.isUndefined(b))return!1;var d={element:b,leftCh:void 0,rightCh:void 0,parent:void 0};return void 0!==c(d)&&(h+=1,!0)},f.clear=function(){e=void 0,h=0},f.isEmpty=function(){return 0===h},f.size=function(){return h},f.contains=function(b){return!a.isUndefined(b)&&void 0!==c(e,b)},f.remove=function(a){function b(a,b){void 0===a.parent?e=b:a===a.parent.leftCh?a.parent.leftCh=b:a.parent.rightCh=b,void 0!==b&&(b.parent=a.parent)}function f(a){if(void 0===a.leftCh)b(a,a.rightCh);else if(void 0===a.rightCh)b(a,a.leftCh);else{var c=d(a.rightCh);c.parent!==a&&(b(c,c.rightCh),c.rightCh=a.rightCh,c.rightCh.parent=c),b(a,c),c.leftCh=a.leftCh,c.leftCh.parent=c}}var g;return g=c(e,a),void 0!==g&&(f(g),h-=1,!0)},f.inorderTraversal=function(a){function b(a,c,d){void 0===a||d.stop||(b(a.leftCh,c,d),d.stop||(d.stop=c(a.element)===!1,d.stop||b(a.rightCh,c,d)))}b(e,a,{stop:!1})},f.preorderTraversal=function(a){function b(a,c,d){void 0===a||d.stop||(d.stop=c(a.element)===!1,d.stop||(b(a.leftCh,c,d),d.stop||b(a.rightCh,c,d)))}b(e,a,{stop:!1})},f.postorderTraversal=function(a){function b(a,c,d){void 0===a||d.stop||(b(a.leftCh,c,d),d.stop||(b(a.rightCh,c,d),d.stop||(d.stop=c(a.element)===!1)))}b(e,a,{stop:!1})},f.levelTraversal=function(b){function c(b,c){var d=a.Queue();for(void 0!==b&&d.enqueue(b);!d.isEmpty();){if(b=d.dequeue(),c(b.element)===!1)return;void 0!==b.leftCh&&d.enqueue(b.leftCh),void 0!==b.rightCh&&d.enqueue(b.rightCh)}}c(e,b)},f.minimum=function(){if(!f.isEmpty())return d(e).element},f.maximum=function(){function a(a){for(;void 0!==a.rightCh;)a=a.rightCh;return a}if(!f.isEmpty())return a(e).element},f.forEach=function(a){f.inorderTraversal(a)},f.toArray=function(){var a=[];return f.inorderTraversal(function(b){a.push(b)}),a},f.height=function(){function a(b){return void 0===b?-1:Math.max(a(b.leftCh),a(b.rightCh))+1}function b(b){return void 0===b?-1:Math.max(a(b.leftCh),a(b.rightCh))+1}return b(e)},f.equals=function(b){var c;return!a.isUndefined(b)&&"function"==typeof b.levelTraversal&&(f.size()===b.size()&&(c=!0,b.forEach(function(a){return c=f.contains(a)}),c))},f},a.Dictionary=function(b){var c={},d={},e=0,f=b||a.defaultToString,g="/$ ";return c.get=function(b){var c=d[g+f(b)];if(!a.isUndefined(c))return c.value},c.set=function(b,c){var h,i,j;if(!a.isUndefined(b)&&!a.isUndefined(c))return i=g+f(b),j=d[i],a.isUndefined(j)?(e+=1,h=void 0):h=j.value,d[i]={key:b,value:c},h},c.remove=function(b){var c=g+f(b),h=d[c];if(!a.isUndefined(h))return delete d[c],e-=1,h.value},c.keys=function(){var a,b=[];for(a in d)Object.prototype.hasOwnProperty.call(d,a)&&b.push(d[a].key);return b},c.values=function(){var a,b=[];for(a in d)Object.prototype.hasOwnProperty.call(d,a)&&b.push(d[a].value);return b},c.forEach=function(a){var b,c,e;for(b in d)if(Object.prototype.hasOwnProperty.call(d,b)&&(c=d[b],e=a(c.key,c.value),e===!1))return},c.containsKey=function(b){return!a.isUndefined(c.get(b))},c.clear=function(){d={},e=0},c.size=function(){return e},c.isEmpty=function(){return e<=0},c.equals=function(b,d){var e,f;return!a.isUndefined(b)&&"function"==typeof b.keys&&(c.size()===b.size()&&(e=d||a.defaultEquals,f=!0,b.forEach(function(a,b){return f=e(c.get(a),b)}),f))},c},a.Heap=function(b){function c(b){function c(a){return Math.floor((a-1)/2)}var d;for(d=c(b);b>0&&g(f[d],f[b])>0;)a.arrays.swap(f,d,b),b=d,d=c(b)}function d(b){function c(a){return 2*a+1}function d(a){return 2*a+2}function e(a,b){return b>=f.length?a>=f.length?-1:a:g(f[a],f[b])<=0?a:b}var h;for(h=e(c(b),d(b));h>=0&&g(f[b],f[h])>0;)a.arrays.swap(f,h,b),b=h,h=e(c(b),d(b))}var e={},f=[],g=b||a.defaultCompare;return e.peek=function(){if(f.length>0)return f[0]},e.add=function(b){if(!a.isUndefined(b))return f.push(b),c(f.length-1),!0},e.removeRoot=function(){var a;if(f.length>0)return a=f[0],f[0]=f[f.length-1],f.splice(f.length-1,1),f.length>0&&d(0),a},e.contains=function(b){var c=a.compareToEquals(g);return a.arrays.contains(f,b,c)},e.size=function(){return f.length},e.isEmpty=function(){return f.length<=0},e.clear=function(){f.length=0},e.forEach=function(b){a.arrays.forEach(f,b)},e.toArray=function(){return a.arrays.copy(f)},e.equals=function(b){var c,d,f;return!a.isUndefined(b)&&"function"==typeof b.removeRoot&&(e.size()===b.size()&&(c=e.toArray(),d=b.toArray(),f=a.compareToEquals(g),c.sort(g),d.sort(g),a.arrays.equals(c,d,f)))},e},a.LinkedList=function(){function b(a){var b,e;if(!(a<0||a>=f)){if(a===f-1)return d;for(b=c,e=0;e<a;e+=1)b=b.next;return b}}var c,d,e={},f=0;return e.add=function(e,g){var h,i;return a.isUndefined(g)&&(g=f),!(g<0||g>f||a.isUndefined(e))&&(h={element:e,next:void 0},0===f?(c=h,d=h):g===f?(d.next=h,d=h):0===g?(h.next=c,c=h):(i=b(g-1),h.next=i.next,i.next=h),f+=1,!0)},e.first=function(){if(void 0!==c)return c.element},e.last=function(){if(void 0!==d)return d.element},e.elementAtIndex=function(a){var c=b(a);if(void 0!==c)return c.element},e.indexOf=function(b,d){var e=d||a.defaultEquals,f=c,g=0;if(a.isUndefined(b))return-1;for(;void 0!==f;){if(e(f.element,b))return g;g+=1,f=f.next}return-1},e.contains=function(a,b){return e.indexOf(a,b)>=0},e.remove=function(b,e){var g,h=e||a.defaultEquals,i=c;if(f<1||a.isUndefined(b))return!1;for(;void 0!==i;){if(h(i.element,b))return i===c?(c=c.next,i===d&&(d=void 0)):i===d?(d=g,g.next=i.next,i.next=void 0):(g.next=i.next,i.next=void 0),f-=1,!0;g=i,i=i.next}return!1},e.clear=function(){c=void 0,d=void 0,f=0},e.equals=function(b,d){var f=d||a.defaultEquals,g=!0,h=c;return!a.isUndefined(b)&&"function"==typeof b.elementAtIndex&&(e.size()===b.size()&&(b.forEach(function(a){return g=f(a,h.element),h=h.next,g}),g))},e.removeElementAtIndex=function(a){var e,g;if(!(a<0||a>=f))return 1===f?(e=c.element,c=void 0,d=void 0):(g=b(a-1),void 0===g?(e=c.element,c=c.next):g.next===d&&(e=d.element,d=g),void 0!==g&&(e=g.next.element,g.next=g.next.next)),f-=1,e},e.forEach=function(a){for(var b=c;void 0!==b&&a(b.element)!==!1;)b=b.next},e.reverse=function(){for(var a,b,e=c;void 0!==e;)b=e.next,e.next=a,a=e,e=b;b=c,c=d,d=b},e.toArray=function(){var a=[];return e.forEach(function(b){a.push(b)}),a},e.size=function(){return f},e.isEmpty=function(){return f<=0},e},a.MultiDictionary=function(b,c){var d={},e=new a.Dictionary(b),f=c||a.defaultEquals;return d.get=function(b){var c=e.get(b);return a.isUndefined(c)?[]:a.arrays.copy(c)},d.set=function(b,c){var g;return!a.isUndefined(b)&&!a.isUndefined(c)&&(d.containsKey(b)?(g=e.get(b),!a.arrays.contains(g,c,f)&&(g.push(c),!0)):(e.set(b,[c]),!0))},d.remove=function(b,c){var d,g;return a.isUndefined(c)?(d=e.remove(b),!a.isUndefined(d)):(g=e.get(b),!!a.arrays.remove(g,c,f)&&(0===g.length&&e.remove(b),!0))},d.keys=function(){return e.keys()},d.values=function(){var a,b,c,d=e.values(),f=[];for(a=0;a<d.length;a+=1)for(c=d[a],b=0;b<c.length;b+=1)f.push(c[b]);return f},d.containsKey=function(a){return e.containsKey(a)},d.clear=function(){return e.clear()},d.size=function(){return e.size()},d.isEmpty=function(){return e.isEmpty()},d.forEach=function(a){return e.forEach(a)},d.equals=function(b){var c,e=!0;return!a.isUndefined(b)&&"function"==typeof b.values&&(d.size()===b.size()&&(b.forEach(function(b,g){return c=d.get(b)||[],c.length!==g.length?e=!1:a.arrays.forEach(c,function(b){return e=a.arrays.contains(g,b,f)}),e}),e))},d},a.PriorityQueue=function(b){var c={},d=a.reverseCompareFunction(b),e=new a.Heap(d);return c.enqueue=function(a){return e.add(a)},c.add=function(a){return e.add(a)},c.dequeue=function(){var a;if(0!==e.size())return a=e.peek(),e.removeRoot(),a},c.peek=function(){return e.peek()},c.contains=function(a){return e.contains(a)},c.isEmpty=function(){return e.isEmpty()},c.size=function(){return e.size()},c.clear=function(){e.clear()},c.forEach=function(a){e.forEach(a)},c.toArray=function(){return e.toArray()},c.equals=function(b){var e,f,g;return!a.isUndefined(b)&&"function"==typeof b.dequeue&&(c.size()===b.size()&&(e=c.toArray(),f=b.toArray(),g=a.compareToEquals(d),e.sort(d),f.sort(d),a.arrays.equals(e,f,g)))},c},a.Queue=function(){var b={},c=new a.LinkedList;return b.enqueue=function(a){return c.add(a)},b.add=function(a){return c.add(a)},b.dequeue=function(){var a;if(0!==c.size())return a=c.first(),c.removeElementAtIndex(0),a},b.peek=function(){if(0!==c.size())return c.first()},b.size=function(){return c.size()},b.contains=function(a,b){return c.contains(a,b)},b.isEmpty=function(){return c.size()<=0},b.clear=function(){c.clear()},b.forEach=function(a){c.forEach(a)},b.toArray=function(){return c.toArray()},b.equals=function(c,d){var e,f,g;return!a.isUndefined(c)&&"function"==typeof c.dequeue&&(b.size()===c.size()&&(e=d||a.defaultEquals,f=!0,c.forEach(function(a){return g=b.dequeue(),b.enqueue(g),f=e(g,a)}),f))},b},a.Set=function(b){var c={},d=new a.Dictionary(b);return c.contains=function(a){return d.containsKey(a)},c.add=function(b){return!c.contains(b)&&!a.isUndefined(b)&&(d.set(b,b),!0)},c.intersection=function(a){c.forEach(function(b){a.contains(b)||c.remove(b)})},c.union=function(a){a.forEach(function(a){c.add(a)})},c.difference=function(a){a.forEach(function(a){c.remove(a)})},c.isSubsetOf=function(a){var b=!0;return!(c.size()>a.size())&&(c.forEach(function(c){if(!a.contains(c))return b=!1,!1}),b)},c.remove=function(a){return!!c.contains(a)&&(d.remove(a),!0)},c.forEach=function(a){d.forEach(function(b,c){return a(c)})},c.toArray=function(){return d.values()},c.isEmpty=function(){return d.isEmpty()},c.size=function(){return d.size()},c.clear=function(){d.clear()},c.equals=function(b){var d;return!a.isUndefined(b)&&"function"==typeof b.isSubsetOf&&(c.size()===b.size()&&(d=!0,b.forEach(function(a){return d=c.contains(a)}),d))},c},a.Stack=function(){var b={},c=new a.LinkedList;return b.push=function(a){return c.add(a,0)},b.add=function(a){return c.add(a,0)},b.pop=function(){return c.removeElementAtIndex(0)},b.peek=function(){return c.first()},b.size=function(){return c.size()},b.contains=function(a,b){return c.contains(a,b)},b.isEmpty=function(){return c.isEmpty()},b.clear=function(){c.clear()},b.forEach=function(a){c.forEach(a)},b.toArray=function(){return c.toArray()},b.equals=function(d,e){var f,g,h;return!a.isUndefined(d)&&"function"==typeof d.peek&&(b.size()===d.size()&&(f=e||a.defaultEquals,g=!0,d.forEach(function(a){return h=b.pop(),c.add(h),g=f(h,a)}),g))},b},a});
//# sourceMappingURL=buckets.min.js.map
;var Structures = buckets;
