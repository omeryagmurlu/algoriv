export const initialCode =
`// type your algorithm's logic code...
//
// variables you can use will appear as comments on top of
// this editor as you specify options from the right sidebar.`;

export const initialDescription =
'Add your algorithm\'s description here, you can use markdown';

export const initialPseudocode = [
	'# enter your algorithm\'s pseudo-code'
];

export const initialAlgName = 'Untitled Algorithm';

export const initialSaves = [{ name: 'Custom Algorithm DFS Example', data: { code: "// type your algorithm's logic code, variables you can use will appear as comments on top of\n// this editor as you specify options from the right sidebar. Below you see an example algorithm,\n// DFS, with a starting vertex option and 2 tables (called visiterd and recursion) added.\nconst { graph, startVertex: st } = input;\nlog(graph);\n\nconst getNeighbors = (v) => graph.edges.map(o => {\n    if (o.source === v) {\n        return {\n            u: o.target,\n            edge: o.key\n        };\n    }\n    \n    if (o.undirected && o.target === v) {\n        return {\n            u: o.source,\n            edge: o.key\n        };\n    }\n}).filter(x => x);\n\nconst reclist = [];\nconst posEd = [];\nconst vis = graph.nodes.map(v => v.key).reduce((acc, v) => {\n\tacc[v] = false;\n\treturn acc;\n}, {});\n\n/**\n * snap is a normal function, but functions like this are very helpful, since manually typing\n * all algorithm things when you want to shoot a frame is very not DRY.\n *\n * at the end it calls 'frame' which shoots a frame.\n */\nconst snap = (a, b, c, d) => {\n    // these are kinda constants / or change according to a constant, no need for specific params for them\n\t// DFS.visited(vis); // These two tables are added from the right sidebar, their names were specified there too\n\t// DFS.recursion([reclist]); // This is the other table, we are passing columns to it, you can see the API for detailed info\n\t//DFS.graph.setColor(0, vis2array(vis), posEd); // graph property is set, since the type is 'graph'\n\tAlgorithm.graph.setColor(1, reclist, []); // you can see its API for info\n\n\t// these change everytime, use params\n\tAlgorithm.code(a); // pseudo-code, a is the lines to highlight, [0, 1, ...]\n\tAlgorithm.explanation(b); // explanation is also in every algorithm, you must give a quick explanation; b is a string\n\tAlgorithm.graph.setColor(2, c, d);\n\tframe(); // when you are ready to make a frame, call the frame global.\n};\n\nconst dfs = v => {\n\tsnap([0], `Start DFS(${v})`, v); // we are shooting a frame here\n\tif (vis[v]) {\n\t\tsnap([1], `${v} is visited; return`, v); // here too\n\t\treturn;\n\t}\n\tvis[v] = true;\n\tsnap([2], `Mark ${v} visited`, v); // here too too :D\n\tgetNeighbors(v).forEach(({ u, edge }) => {\n\t\tsnap([3, 4], `For neighbour ${u} of ${v} do DFS`, v, edge);\n\t\treclist.push(u);\n\t\tdfs(u);\n\t\treclist.pop();\n\t\tposEd.push(edge);\n\t});\n\tsnap([5], `DFS(${v}) ended!`, v);\n};\nreclist.push(st);\nsnap([], undefined);\nsnap([7], `Starting main DFS from ${st}`, st);\ndfs(st);\nsnap([], `DFS from ${st} ended!`, st);\n\n// ps: the editor you are seeing here is ace, you can find it's default keyboard shortcuts here:\n// https://github.com/ajaxorg/ace/wiki/Default-Keyboard-Shortcuts", name: 'Custom Algorithm DFS Example', type: 'graph', typeFeatures: { 'Starting Vertex': true }, pseudoCode: ['DFS(v):', '    if v is visited return', '    mark v visited', '    for every neighbour u of v:', '        DFS(u)', '    return', 'DFS(s)'], description: 'Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures. One starts at the root (selecting some arbitrary node as the root in the case of a graph) and explores as far as possible along each branch before backtracking.\n\nA version of depth-first search was investigated in the 19th century by French mathematician Charles Pierre TrÃ©maux as a strategy for solving mazes.', debugConsole: ['{\n  "attributes": {},\n  "nodes": [\n    {\n      "key": "0"\n    },\n    {\n      "key": "1"\n    },\n    {\n      "key": "2"\n    },\n    {\n      "key": "3"\n    },\n    {\n      "key": "4"\n    },\n    {\n      "key": "5"\n    },\n    {\n      "key": "6"\n    },\n    {\n      "key": "7"\n    },\n    {\n      "key": "8"\n    }\n  ],\n  "edges": [\n    {\n      "source": "0",\n      "target": "1",\n      "key": "0->1: 76366.56832757356",\n      "attributes": {\n        "weight": 4\n      },\n      "undirected": true\n    },\n    {\n      "source": "0",\n      "target": "7",\n      "key": "0->7: 79090.34392478436",\n      "attributes": {\n        "weight": 8\n      },\n      "undirected": true\n    },\n    {\n      "source": "1",\n      "target": "2",\n      "key": "1->2: 98866.98581580177",\n      "attributes": {\n        "weight": 8\n      },\n      "undirected": true\n    },\n    {\n      "source": "1",\n      "target": "7",\n      "key": "1->7: 86748.91358124801",\n      "attributes": {\n        "weight": 11\n      },\n      "undirected": true\n    },\n    {\n      "source": "2",\n      "target": "3",\n      "key": "2->3: 92551.6151495049",\n      "attributes": {\n        "weight": 7\n      },\n      "undirected": true\n    },\n    {\n      "source": "2",\n      "target": "5",\n      "key": "2->5: 8639.776472639604",\n      "attributes": {\n        "weight": 4\n      },\n      "undirected": true\n    },\n    {\n      "source": "2",\n      "target": "8",\n      "key": "2->8: 18326.086218366687",\n      "attributes": {\n        "weight": 2\n      },\n      "undirected": true\n    },\n    {\n      "source": "3",\n      "target": "4",\n      "key": "3->4: 51427.0436176971",\n      "attributes": {\n        "weight": 9\n      },\n      "undirected": true\n    },\n    {\n      "source": "3",\n      "target": "5",\n      "key": "3->5: 68687.8876969782",\n      "attributes": {\n        "weight": 14\n      },\n      "undirected": true\n    },\n    {\n      "source": "4",\n      "target": "5",\n      "key": "4->5: 63967.615844830485",\n      "attributes": {\n        "weight": 10\n      },\n      "undirected": true\n    },\n    {\n      "source": "5",\n      "target": "6",\n      "key": "5->6: 84732.79933100118",\n      "attributes": {\n        "weight": 2\n      },\n      "undirected": true\n    },\n    {\n      "source": "6",\n      "target": "7",\n      "key": "6->7: 53719.00032381356",\n      "attributes": {\n        "weight": 1\n      },\n      "undirected": true\n    },\n    {\n      "source": "6",\n      "target": "8",\n      "key": "6->8: 74434.8532729847",\n      "attributes": {\n        "weight": 6\n      },\n      "undirected": true\n    },\n    {\n      "source": "7",\n      "target": "8",\n      "key": "7->8: 61294.45519323566",\n      "attributes": {\n        "weight": 7\n      },\n      "undirected": true\n    }\n  ]\n}'] } }]; // eslint-disable-line no-template-curly-in-string
